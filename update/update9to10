#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Update from version 9 to version 10 of Yokadi DB

- Turn Table.recurrence into a text field
- Fill it with recurrence info
- Remove Recurrence table

@author: Aurélien Gâteau <mail@agateau.com>
@license: GPL v3 or newer
"""
import json
import pickle
import sys

from sqlalchemy import create_engine


def tuplify(value):
    if value is None:
        return ()
    if isinstance(value, int):
        return (value,)
    else:
        return tuple(value)


def createByweekdayValue(rule):
    if rule._bynweekday:
        # Special case: recurrence every 1st, 2nd, 3rd, 4th or last $weekday of month
        weekday, pos = rule._bynweekday[0]
        return dict(weekday=weekday, pos=pos)

    return tuplify(rule._byweekday)


def createDictFromRule(pickledRule):
    if not pickledRule:
        return {}

    rule = pickle.loads(pickledRule)
    dct = {}
    dct["freq"] = rule._freq
    dct["bymonth"] = tuplify(rule._bymonth)
    dct["bymonthday"] = tuplify(rule._bymonthday)
    dct["byweekday"] = createByweekdayValue(rule)
    dct["byhour"] = tuplify(rule._byhour)
    dct["byminute"] = tuplify(rule._byminute)
    return dct


def addRecurrenceColumn(conn):
    conn.execute("alter table task add column recurrence")
    for row in conn.execute("select t.id, r.rule from task t left join recurrence r on t.recurrence_id = r.id"):
        id = row["id"]
        pickledRule = row["rule"]
        dct = createDictFromRule(pickledRule)
        ruleStr = json.dumps(dct)

        conn.execute("update task set recurrence = ? where id = ?", ruleStr, id)


def deleteRecurrenceTable(conn):
    conn.execute("drop table recurrence")


def deleteTableColumn(conn, table, columnsToKeep):
    columns = ",".join(columnsToKeep)
    sqlCommands = (
        "create temporary table {table}_backup({columns})",
        "insert into {table}_backup select {columns} from {table}",
        "drop table {table}",
        "create table {table}({columns})",
        "insert into {table} select {columns} from {table}_backup",
        "drop table {table}_backup",
        )
    for sql in sqlCommands:
        conn.execute(sql.format(table=table, columns=columns))


def main():
    taskColumnList = (
        "id", "uuid", "title", "creation_date", "due_date", "done_date",
        "description", "urgency", "status", "recurrence", "project_id",
    )
    uri = 'sqlite:///' + sys.argv[1]
    engine = create_engine(uri)
    with engine.begin() as conn:
        addRecurrenceColumn(conn)
        deleteRecurrenceTable(conn)
        deleteTableColumn(conn, "task", taskColumnList)


if __name__ == "__main__":
    main()
# vi: ts=4 sw=4 et
